// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  PAID
  CANCELLED
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password String
  fullName String
  role     Role      @default(USER)
  products Product[]
  orders   Order[]
  reviews  Review[]
  address  Address[]
  cart     Cart?
  wishList WishList?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  cartItems CartItem[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(0)
  price    Float

  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model WishList {
  id            String         @id @default(cuid())
  wishListItems WishListItem[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishListItem {
  id String @id @default(cuid())

  wishList   WishList @relation(fields: [wishListId], references: [id])
  wishListId String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([wishListId, productId])
}

model Address {
  id        String  @id @default(cuid())
  fullName  String?
  phone     String
  city      String
  state     String
  isDefault Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String @id @default(cuid())
  name        String
  price       Float
  quantity    Int
  color       String
  description String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishListItems WishListItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String @id @default(cuid())
  status      Status @default(PENDING)
  totalAmount Float

  orderItems OrderItem[]
  user       User        @relation(fields: [userId], references: [id])
  userId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  total     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String  @id @default(cuid())
  rating    Int
  comment   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}
